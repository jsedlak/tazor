@typeparam TTarget
@implements IDragTarget
@inject IDragProvider DragProvider
<div
    @ondragenter=@OnDragEnter     
    @ondragleave=@OnDragLeave
    dropzone="move"
    ondragstart="event.dataTransfer.setData('', event.target.id);"
    @ondragover:preventDefault
    @ondrop:stopPropagation
    @ondragenter:stopPropagation
    @ondragend:stopPropagation
    @ondragover:stopPropagation
    @ondragleave:stopPropagation
    @ondragstart:stopPropagation
    @ondrop=@OnDragDropped>
    @{ var cls = DragProvider.DraggedObject != null ? "border-4 border-dashed p-8 border-gray-400 rounded flex justify-center items-center" : ""; }
    <div
        class="@cls">
        &nbsp;
        @if (DragProvider.DraggedObject != null)
        {
            <p>Drop to me!</p>
        }
    </div>
</div>
@code {
    [Parameter] public bool Visible { get; set; } = false;

    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter] public RenderFragment Content { get; set; }

    [Parameter] public EventCallback<object> Dropped { get; set; }

    protected override void OnInitialized()
    {
        DragProvider.PropertyChanged += (sender, args) =>
        {
            StateHasChanged();
        };

        base.OnInitialized();
    }

    private void OnDragEnter(DragEventArgs obj)
    {
        Console.WriteLine("DropZone.DragEnter");
        DragProvider.DragTarget = this;
    }

    private void OnDragLeave(DragEventArgs obj)
    {
        Console.WriteLine("DropZone.DragLeave");
        if (DragProvider.DragTarget == this)
        {
            DragProvider.DragTarget = null;
        }
    }

    public Task CompleteDrag(object draggedObject)
    {
        Console.WriteLine("CompleteDrag");
        return Task.CompletedTask;
    }

    private async Task OnDragDropped(DragEventArgs arg)
    {
        Console.WriteLine("OnDragDropped");
        await DragProvider.DragSource?.CompleteDrag(DragProvider.DraggedObject);
        await Dropped.InvokeAsync(DragProvider.DraggedObject);
    }

}