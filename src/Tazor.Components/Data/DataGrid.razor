@typeparam TItem
<div class=@Theme.TableSpacing>
    <div class=@Theme.TableToolbar>
        <div>
            <span class="text-xs">Search will go here</span>
        </div>
        <div>
            <div class="relative">
                <ClickContainer OnClickedOutside=@(() => { _isColumnPopupOpen = false; StateHasChanged(); })>
                    <a class="cursor-pointer" title="Columns" @onclick=@(() => { _isColumnPopupOpen = !_isColumnPopupOpen; })>
                        <svg xmlns="http://www.w3.org/2000/svg" class="inline-block h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M3 10h18M3 14h18m-9-4v8m-7 0h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                        </svg>
                    </a>
                    <div class=@($"top-100 right-0 mt-5 absolute dark:bg-blue-800 shadow p-2 {CetColumnPopupClass()}")>
                        @foreach (var col in Columns)
                        {
                            if (!col.IsRemovable) { continue; }
                            <div class="px-5 py-2 flex items-center">
                                <span class="mr-3">
                                    <Switch IsChecked=@col.IsVisible IsCheckedChanged=@((bool newValue) => { Console.WriteLine($"{col.Title} => {newValue}"); col.IsVisible = newValue; StateHasChanged(); }) />
                                </span>
                                <span class="text-sm">
                                    @col.Title
                                </span>
                            </div>
                        }
                    </div>
                </ClickContainer>
            </div>

        </div>
    </div>
    <table class=@Theme.Table>
        <thead class=@Theme.TableHeader>
            <tr>
                @foreach (var col in Columns)
                {
                    if (col.IsVisible)
                    {
                        <td class=@Theme.TableColumnHeader>@col.Title</td>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @{
                var rowCount = 1;
                var visibleItems = Items.Skip((CurrentPage - 1) * NumberPerPage).Take(NumberPerPage);
            }
            @foreach (var item in visibleItems)
            {
                <tr class=@(rowCount % 2 == 0 ? Theme.TableEvenRow : Theme.TableOddRow)>
                    @foreach (var col in Columns)
                    {
                        if (col.IsVisible)
                        {
                            var columnFieldValue = col.Field.Compile()(item);
                            <td class=@Theme.TableCell>
                                @if(col.FieldRenderer != null)
                                {
                                    @col.FieldRenderer(columnFieldValue)
                                }
                                else {
                                    @(columnFieldValue.ToString())
                                }
                            </td>
                        }
                    }
                </tr>
                rowCount++;
            }
            @if (SummaryRow != SummaryRowMode.Hidden)
            {
                <tr class=@($"summary {Theme.TableSummaryRow}")>
                    @foreach (var col in Columns)
                    {
                        <td class=@Theme.TableCell>
                            @if (col.Summary != null)
                            {
                                @col.Summary(SummaryRow == SummaryRowMode.AllItems ? Items : visibleItems);
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
    <div class=@Theme.TableHeader>
        <Pager NumberOfVisiblePages=5 @bind-CurrentPage=@CurrentPage Pages=@((int)Math.Ceiling((double)Items.Count() / NumberPerPage)) />
    </div>
</div>
@code {
    [Parameter]
    public int NumberPerPage { get; set; } = 10;

    [Parameter]
    public int CurrentPage { get; set; } = 1;

    [Parameter]
    public IEnumerable<TItem> Items { get; set; } = Enumerable.Empty<TItem>();

    [Parameter]
    public IEnumerable<Column<TItem>> Columns { get; set; } = Enumerable.Empty<Column<TItem>>();

    [Parameter]
    public SummaryRowMode SummaryRow { get; set; }

    private bool _isColumnPopupOpen = false;

    private string CetColumnPopupClass() => _isColumnPopupOpen ? "block" : "hidden";
}
