/*! tailwindcss v4.0.0 | MIT License | https://tailwindcss.com */
@tailwind bas: @tailwind base;
@tailwind components;
.pointer-events-auto {
  pointer-events: auto;
}
.pointer-events-none {
  pointer-events: none;
}
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}
.absolute {
  position: absolute;
}
.fixed {
  position: fixed;
}
.relative {
  position: relative;
}
.static {
  position: static;
}
.left-1\/2 {
  left: calc(1/2 * 100%);
}
.z-10 {
  z-index: 10;
}
.z-50 {
  z-index: 50;
}
.float-right {
  float: right;
}
.container {
  width: 100%;
}
.mx-auto {
  margin-inline: auto;
}
.block {
  display: block;
}
.flex {
  display: flex;
}
.grid {
  display: grid;
}
.hidden {
  display: none;
}
.inline {
  display: inline;
}
.inline-block {
  display: inline-block;
}
.inline-flex {
  display: inline-flex;
}
.h-full {
  height: 100%;
}
.min-h-full {
  min-height: 100%;
}
.w-10\/12 {
  width: calc(10/12 * 100%);
}
.w-full {
  width: 100%;
}
.min-w-full {
  min-width: 100%;
}
.flex-shrink-0 {
  flex-shrink: 0;
}
.flex-grow {
  flex-grow: 1;
}
.-translate-x-1\/2 {
  --tw-translate-x: calc(calc(1/2 * 100%) * -1);
  translate: var(--tw-translate-x) var(--tw-translate-y);
}
.transform {
  transform: var(--tw-rotate-x) var(--tw-rotate-y) var(--tw-rotate-z) var(--tw-skew-x) var(--tw-skew-y);
}
.cursor-not-allowed {
  cursor: not-allowed;
}
.cursor-pointer {
  cursor: pointer;
}
.list-none {
  list-style-type: none;
}
.grid-cols-3 {
  grid-template-columns: repeat(3, minmax(0, 1fr));
}
.flex-col {
  flex-direction: column;
}
.place-items-end {
  place-items: end;
}
.place-items-start {
  place-items: start;
}
.items-center {
  align-items: center;
}
.justify-between {
  justify-content: space-between;
}
.justify-center {
  justify-content: center;
}
.justify-end {
  justify-content: flex-end;
}
.justify-start {
  justify-content: flex-start;
}
.divide-y {
  :where(& > :not(:last-child)) {
    --tw-divide-y-reverse: 0;
    border-bottom-style: var(--tw-border-style);
    border-top-style: var(--tw-border-style);
    border-top-width: calc(1px * var(--tw-divide-y-reverse));
    border-bottom-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));
  }
}
.overflow-hidden {
  overflow: hidden;
}
.overflow-x-auto {
  overflow-x: auto;
}
.overflow-x-hidden {
  overflow-x: hidden;
}
.overflow-y-auto {
  overflow-y: auto;
}
.rounded-full {
  border-radius: calc(infinity * 1px);
}
.rounded-b-none {
  border-bottom-right-radius: 0;
  border-bottom-left-radius: 0;
}
.border {
  border-style: var(--tw-border-style);
  border-width: 1px;
}
.border-2 {
  border-style: var(--tw-border-style);
  border-width: 2px;
}
.border-4 {
  border-style: var(--tw-border-style);
  border-width: 4px;
}
.border-t-2 {
  border-top-style: var(--tw-border-style);
  border-top-width: 2px;
}
.border-b {
  border-bottom-style: var(--tw-border-style);
  border-bottom-width: 1px;
}
.border-b-2 {
  border-bottom-style: var(--tw-border-style);
  border-bottom-width: 2px;
}
.border-l-4 {
  border-left-style: var(--tw-border-style);
  border-left-width: 4px;
}
.border-solid {
  --tw-border-style: solid;
  border-style: solid;
}
.border-current {
  border-color: currentColor;
}
.border-transparent {
  border-color: transparent;
}
.border-e-transparent {
  border-inline-end-color: transparent;
}
.bg-transparent {
  background-color: transparent;
}
.text-center {
  text-align: center;
}
.text-left {
  text-align: left;
}
.align-\[-0\.125em\] {
  vertical-align: -0.125em;
}
.whitespace-nowrap {
  white-space: nowrap;
}
.underline {
  text-decoration-line: underline;
}
.opacity-50 {
  opacity: 50%;
}
.opacity-75 {
  opacity: 75%;
}
.ring-0 {
  --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentColor);
  box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
}
.ring-1 {
  --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentColor);
  box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
}
.transition {
  transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter;
  transition-timing-function: var(--tw-ease, ease);
  transition-duration: var(--tw-duration, 0s);
}
.transition-all {
  transition-property: all;
  transition-timing-function: var(--tw-ease, ease);
  transition-duration: var(--tw-duration, 0s);
}
.transition-colors {
  transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to;
  transition-timing-function: var(--tw-ease, ease);
  transition-duration: var(--tw-duration, 0s);
}
.duration-200 {
  --tw-duration: 200ms;
  transition-duration: 200ms;
}
.duration-300 {
  --tw-duration: 300ms;
  transition-duration: 300ms;
}
.outline-none {
  --tw-outline-style: none;
  outline-style: none;
}
.focus\:ring-2 {
  &:focus {
    --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentColor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
}
.focus\:outline-none {
  &:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
}
.motion-reduce\:animate-\[spin_1\.5s_linear_infinite\] {
  @media (prefers-reduced-motion: reduce) {
    animation: spin 1.5s linear infinite;
  }
}
.notification {
  animation: notificationInbound 0.5s;
}
@keyframes notificationInbound {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
.namespace {
  opacity: .7;
}
.token.doctype .token.doctype-tag {
  color: #569CD6;
}
.token.doctype .token.name {
  color: #9cdcfe;
}
.token.comment, .token.prolog {
  color: #6a9955;
}
.token.punctuation, .language-html .language-css .token.punctuation, .language-html .language-javascript .token.punctuation {
  color: #d4d4d4;
}
.token.property, .token.tag, .token.boolean, .token.number, .token.constant, .token.symbol, .token.inserted, .token.unit {
  color: #b5cea8;
}
.token.selector, .token.attr-name, .token.string, .token.char, .token.builtin, .token.deleted {
  color: #ce9178;
}
.language-css .token.string.url {
  text-decoration: underline;
}
.token.operator, .token.entity {
  color: #d4d4d4;
}
.token.operator.arrow {
  color: #569CD6;
}
.token.atrule {
  color: #ce9178;
}
.token.atrule .token.rule {
  color: #c586c0;
}
.token.atrule .token.url {
  color: #9cdcfe;
}
.token.atrule .token.url .token.function {
  color: #dcdcaa;
}
.token.atrule .token.url .token.punctuation {
  color: #d4d4d4;
}
.token.keyword {
  color: #569CD6;
}
.token.keyword.module, .token.keyword.control-flow {
  color: #c586c0;
}
.token.function, .token.function .token.maybe-class-name {
  color: #dcdcaa;
}
.token.regex {
  color: #d16969;
}
.token.important {
  color: #569cd6;
}
.token.italic {
  font-style: italic;
}
.token.constant {
  color: #9cdcfe;
}
.token.class-name, .token.maybe-class-name {
  color: #4ec9b0;
}
.token.console {
  color: #9cdcfe;
}
.token.parameter {
  color: #9cdcfe;
}
.token.interpolation {
  color: #9cdcfe;
}
.token.punctuation.interpolation-punctuation {
  color: #569cd6;
}
.token.boolean {
  color: #569cd6;
}
.token.property, .token.variable, .token.imports .token.maybe-class-name, .token.exports .token.maybe-class-name {
  color: #9cdcfe;
}
.token.selector {
  color: #d7ba7d;
}
.token.escape {
  color: #d7ba7d;
}
.token.tag {
  color: #569cd6;
}
.token.tag .token.punctuation {
  color: #808080;
}
.token.cdata {
  color: #808080;
}
.token.attr-name {
  color: #9cdcfe;
}
.token.attr-value, .token.attr-value .token.punctuation {
  color: #ce9178;
}
.token.attr-value .token.punctuation.attr-equals {
  color: #d4d4d4;
}
.token.entity {
  color: #569cd6;
}
.token.namespace {
  color: #4ec9b0;
}
pre[class*="language-javascript"], code[class*="language-javascript"], pre[class*="language-jsx"], code[class*="language-jsx"], pre[class*="language-typescript"], code[class*="language-typescript"], pre[class*="language-tsx"], code[class*="language-tsx"] {
  color: #9cdcfe;
}
pre[class*="language-css"], code[class*="language-css"] {
  color: #ce9178;
}
pre[class*="language-html"], code[class*="language-html"] {
  color: #d4d4d4;
}
.language-regex .token.anchor {
  color: #dcdcaa;
}
.language-html .token.punctuation {
  color: #808080;
}
pre[class*="language-"] > code[class*="language-"] {
  position: relative;
  z-index: 1;
}
.line-highlight.line-highlight {
  background: #f7ebc6;
  box-shadow: inset 5px 0 0 #f7d87c;
  z-index: 0;
}
dialog {
  outline: none;
}
dialog.dialog {
  transform: translateY(-20px);
}
dialog.dialog, dialog.dialog::backdrop {
  transition: display 1s allow-discrete, overlay 1s allow-discrete, opacity 1s, transform 1s;
  opacity: 0;
}
dialog.dialog[open] {
  opacity: 1;
  transform: translateY(0px);
}
dialog.dialog[open]::backdrop {
  opacity: 1;
}
@starting-style {
  dialog.dialog[open], dialog.dialog[open]::backdrop {
    opacity: 0;
  }
  dialog.dialog[open] {
    transform: translateY(20px);
  }
}
.dialog::backdrop {
  background-color: rgba(0,0,0,0.5);
}
dialog.flyout {
  inset: 0;
  position: fixed;
  opacity: 0;
  transition: all ease-in-out 0.5s;
}
dialog.flyout[open] {
  opacity: 1;
}
dialog.flyout.flyout-left {
  margin-right: auto;
  margin-left: 0;
  transform: translateX(-100%);
}
dialog.flyout.flyout-left[open] {
  transform: translateX(0);
}
dialog.flyout.flyout-right {
  margin-right: 0;
  margin-left: auto;
  transform: translateX(100%);
}
dialog.flyout.flyout-right[open] {
  transform: translateX(0);
}
dialog.flyout.flyout-top {
  margin-top: 0;
  margin-bottom: auto;
  transform: translateY(-100%);
}
dialog.flyout.flyout-top[open] {
  transform: translateY(0);
}
dialog.flyout.flyout-bottom {
  margin-top: auto;
  margin-bottom: 0;
  transform: translateY(100%);
}
dialog.flyout.flyout-bottom[open] {
  transform: translateY(0);
}
.flyout::backdrop {
  background-color: rgba(0,0,0,0.5);
}
@starting-style {
  dialog.flyout {
    inset: 0;
    position: fixed;
    opacity: 0;
    transition: all ease-in-out 0.5s;
  }
  dialog.flyout.flyout-left {
    margin-right: auto;
    margin-left: 0;
    transform: translateX(-100%);
  }
  dialog.flyout.flyout-right {
    margin-right: 0;
    margin-left: auto;
    transform: translateX(100%);
  }
  dialog.flyout.flyout-top {
    margin-top: 0;
    margin-bottom: auto;
    transform: translateY(-100%);
  }
  dialog.flyout.flyout-bottom {
    margin-top: auto;
    margin-bottom: 0;
    transform: translateY(100%);
  }
}
@property --tw-translate-x {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-translate-y {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-translate-z {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
  initial-value: rotateX(0);
}
@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
  initial-value: rotateY(0);
}
@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
  initial-value: rotateZ(0);
}
@property --tw-skew-x {
  syntax: "*";
  inherits: false;
  initial-value: skewX(0);
}
@property --tw-skew-y {
  syntax: "*";
  inherits: false;
  initial-value: skewY(0);
}
@property --tw-divide-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-ring-inset {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0px;
}
@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}
@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-duration {
  syntax: "*";
  inherits: false;
}
