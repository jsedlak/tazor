@inject NavigationManager Navigation
@inject ITazorTheme Theme
<li class=@($"relative block tazor-menu-list-item {Theme.MenuHeadingItem}")>
    <a href=@Href target=@Target title=@Text class=@($"tazor-menu-anchor {Theme.MenuHeadingAnchor}") @onclick="OnClicked" @onclick:preventDefault="true">
        <div class="flex items-center justify-between">
            @if (LeftIcon != null)
            {
                @((MarkupString)LeftIcon)
            }
            @Text
            @if (RightIcon != null)
            {
                @((MarkupString)RightIcon)
            }
        </div>
    </a>
    @if (ChildContent != null)
    {
        <div class=@($"tazor-submenu z-10 {Theme.MenuDropdownWrapper}")>
            <ul>
                @ChildContent
            </ul>
        </div>
    }
</li>
@code {
    [Parameter]
    public EventCallback<MenuHeading> OnClick { get; set; }

    [Parameter]
    public string Href { get; set; } = null!;

    [Parameter]
    public string? Target { get; set; }

    [Parameter]
    public MarkupString? LeftIcon { get; set; }

    [Parameter]
    public MarkupString? RightIcon { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }


    [Parameter]
    public string Text { get; set; } = null!;

    private async void OnClicked()
    {
        if (string.IsNullOrWhiteSpace(Href))
        {
            await OnClick.InvokeAsync(this);
        }
        else
        {
            Navigation.NavigateTo(Href);
        }
    }
}
