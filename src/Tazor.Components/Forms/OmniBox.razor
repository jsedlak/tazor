@inherits TazorBaseComponent
@typeparam TItem where TItem : class
<ClickContainer OnClickedOutside=OnClickedOutside>
    <div class="bg-white rounded-lg shadow-lg w-10/12" @onclick:stopPropagation>
        @if (!_shouldShowTextBox)
        {
            <div
                @onclick=@(() => { Console.WriteLine("ASDASDA"); _shouldShowTextBox = true; StateHasChanged(); })
                class="w-full px-4 py-3 mb-4 border-b rounded-b-none rounded-lg focus:outline-none text-gray-800">
                <div class="pointer-events-none">
                @if (SelectedItem == null)
                {
                    @PlaceholderTemplate
                }
                else
                {
                    @SelectedItemTemplate(SelectedItem)
                }
                </div>
            </div>
        }
        else
        {
            <input type="text"
                   value=@Input
                   autofocus="true"
                   @ref=@_textboxReference
                   @oninput=@OnInputChanged
                   @onkeydown=@OnKeyDown
                   @onkeydown:preventDefault=@_shouldPreventOnKeyDown
                   placeholder="Type a command..."
                   class="w-full px-4 py-3 mb-4 border-b rounded-b-none rounded-lg focus:outline-none text-gray-800"/>
            @if (_searchResults.Any())
            {
                <ul class="list-none">
                    @foreach (var item in _searchResults)
                    {
                        <li onclick=@(async () => await SelectItemAsync(item))
                            class=@(_currentCommandIndex.HasValue && item == _searchResults[_currentCommandIndex.Value] ? Theme.Utility.CommandPalette.ListItemActive : Theme.Utility.CommandPalette.ListItem)>
                            @(ItemTemplate(item))
                        </li>
                    }
                </ul>
            }
        }
    </div>
</ClickContainer>
@code {
    [Parameter] public Func<string, Task<IEnumerable<TItem>>> OnSearch { get; set; } = null!;

    [Parameter] public string Input { get; set; } = string.Empty;
    
    [Parameter]public EventCallback<string> InputChanged { get; set; }

    [Parameter] public TItem? SelectedItem { get; set; }
    
    [Parameter]public EventCallback<TItem?> SelectedItemChanged { get; set; }

    [Parameter] public RenderFragment<TItem> ItemTemplate { get; set; } = null!;
    
    [Parameter] public RenderFragment? PlaceholderTemplate { get; set; }
    
    [Parameter] public RenderFragment<TItem> SelectedItemTemplate { get; set; }

    private int? _currentCommandIndex = null;
    private ElementReference? _textboxReference;
    private bool _shouldPreventOnKeyDown;
    private TItem[] _searchResults = [];
    private bool _shouldShowTextBox = false;

    private async Task SelectItemAsync(TItem item)
    {
        SelectedItem = item;
        await SelectedItemChanged.InvokeAsync(SelectedItem);
    }
    
    private async Task OnInputChanged(ChangeEventArgs args)
    {
        // set the input
        Input = args.Value?.ToString() ?? "";
        await InputChanged.InvokeAsync(Input);

        // search
        _searchResults = (await OnSearch(Input)).ToArray();
        _currentCommandIndex = null;

        StateHasChanged();
    }
    
    private async Task OnKeyDown(KeyboardEventArgs args)
    {
        _shouldPreventOnKeyDown = false;
        if (args.Key == KeyCodes.Escape)
        {
            _searchResults = [];
            _currentCommandIndex = null;
            _shouldShowTextBox = false;
        }
        else if (args.Key == KeyCodes.ArrowDown && _searchResults.Any())
        {
            _shouldPreventOnKeyDown = true;
            _currentCommandIndex = _currentCommandIndex.GetValueOrDefault(-1) + 1;
            if (_currentCommandIndex > _searchResults.Length - 1)
            {
                _currentCommandIndex = 0;
            }
        }
        else if (args.Key == KeyCodes.ArrowUp && _searchResults.Any())
        {
            _shouldPreventOnKeyDown = true;
            _currentCommandIndex = _currentCommandIndex.GetValueOrDefault(0) - 1;
            if (_currentCommandIndex < 0)
            {
                _currentCommandIndex = _searchResults.Length - 1;
            }
        }
        else if (args.Key == KeyCodes.Enter && _currentCommandIndex != null)
        {
            _shouldPreventOnKeyDown = true;
            await SelectItemAsync(_searchResults[_currentCommandIndex.Value]);
            _searchResults = [];
            _shouldShowTextBox = false;
        }

        //StateHasChanged();
    }
    
    private void OnClickedOutside()
    {
        return;
        Console.WriteLine("Nope");
        _searchResults = [];
        _currentCommandIndex = null;
        _shouldShowTextBox = false;
        StateHasChanged();
    }

}