@inject IThemeManager Theme
@if (IsVisible)
{
    <div class=@Theme.Current.Utility.CommandPalette.Wrapper>
        <div class=@Theme.Current.Utility.CommandPalette.Palette>
            <input
            type="text"
            value=@Input
            @oninput=@OnInputChanged
            @onkeydown=@OnKeyDown
            placeholder="Type a command..."
                   class=@Theme.Current.Utility.CommandPalette.Input />
            <ul class=@Theme.Current.Utility.CommandPalette.List>
                @foreach (var cmd in _visibleCommands)
                {
                    <li class=@(_currentCommandIndex.HasValue && cmd == _visibleCommands[_currentCommandIndex.Value] ? Theme.Current.Utility.CommandPalette.ListItemActive : Theme.Current.Utility.CommandPalette.ListItem)>
                        <span class=@Theme.Current.Utility.CommandPalette.CommandName>@cmd.Name</span>
                        <span class=@Theme.Current.Utility.CommandPalette.CommandDescription>@cmd.Describe(Input)</span>
                    </li>
                }
            </ul>
        </div>
    </div>
}
@code {
    [Parameter]
    public IEnumerable<CommandDescription> Commands { get; set; } = Enumerable.Empty<CommandDescription>();

    [Parameter]
    public string Input { get; set; } = "";

    [Parameter]
    public EventCallback<string> InputChanged { get; set; }

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    private int? _currentCommandIndex = null;
    private CommandDescription[] _visibleCommands = new CommandDescription[] { };

    private async Task OnInputChanged(ChangeEventArgs args)
    {
        Input = args.Value?.ToString() ?? "";
        await InputChanged.InvokeAsync(Input);

        _visibleCommands = Commands.Where(m => m.CanExecute(Input)).ToArray();
        _currentCommandIndex = null;

        StateHasChanged();
    }

    private async Task OnKeyDown(KeyboardEventArgs args)
    {
        if(args.Key == KeyCodes.Escape)
        {
            _visibleCommands = new CommandDescription[] { };
            _currentCommandIndex = null;
            IsVisible = false;
            await IsVisibleChanged.InvokeAsync(false);
        }
        else if(args.Key == KeyCodes.ArrowDown && _visibleCommands.Any())
        {
            _currentCommandIndex = _currentCommandIndex.GetValueOrDefault(-1) + 1;
            if (_currentCommandIndex > _visibleCommands.Length - 1)
            {
                _currentCommandIndex = 0;
            }
        }
        else if (args.Key == KeyCodes.ArrowUp && _visibleCommands.Any())
        {
            _currentCommandIndex = _currentCommandIndex.GetValueOrDefault(0) - 1;
            if(_currentCommandIndex < 0)
            {
                _currentCommandIndex = _visibleCommands.Length - 1;
            }
        }
        else if(args.Key == KeyCodes.Enter && _currentCommandIndex != null)
        {
            await _visibleCommands[_currentCommandIndex.Value].ExecuteAsync(Input);

            _visibleCommands = new CommandDescription[] { };
            _currentCommandIndex = null;
            IsVisible = false;
            await IsVisibleChanged.InvokeAsync(false);
        }

        StateHasChanged();
    }
}
