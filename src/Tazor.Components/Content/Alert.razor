@inject IThemeManager Theme
<div class=@($"{_cssClass} {Class ?? string.Empty}") role="alert">
    <div class="flex items-center">
        <div class=@($"flex-shrink-0 {Theme.Current.Content.AlertIcon}")>
            @if (Icon != null)
            {
                @Icon
            }
            else if (Type == AlertType.Info)
            {
                @HeroIcons.InformationCircle("", "w-6 h-6")
            }
            else if (Type == AlertType.Success)
            {
                @HeroIcons.Check("", "w-6 h-6")
            }
            else if (Type == AlertType.Warning)
            {
                @HeroIcons.Bolt("", "w-6 h-6")
            }
            else if (Type == AlertType.Error)
            {
                @HeroIcons.XMark("", "w-6 h-6")
            }
            else
            {
                @HeroIcons.QuestionMarkCircle("", "w-6 h-6")
            }
        </div>
        <div class="ml-4">
            @if (!string.IsNullOrWhiteSpace(Title))
            {
                <div class="text-sm font-semibold">@Title</div>
            }
            <div class="text-sm">
                @if (Content != null)
                {
                    @Content
                }
            </div>
        </div>
    </div>
    <div class="text-sm font-medium">
        @if (LinkContent != null)
        {
            @LinkContent
        }
    </div>
</div>

@code {
    [Parameter]
    public string? Title { get; set; } = null;

    [Parameter]
    public RenderFragment? Icon { get; set; } = null;

    [Parameter]
    public RenderFragment? Content { get; set; } = null;

    [Parameter]
    public RenderFragment? LinkContent { get; set; } = null;

    [Parameter]
    public AlertType Type { get; set; } = AlertType.Info;

    [Parameter]
    public string? Class { get; set; }

    private string _cssClass { get; set; } = "";

    protected override void OnInitialized()
    {
        if (Type == AlertType.Custom)
        {
            _cssClass = $"{Theme.Current.Content.AlertGlobal} {Class ?? string.Empty}";
        }
        else
        {
            var alertClass = "";
            switch(Type)
            {
                case AlertType.Success:
                    alertClass = Theme.Current.Content.AlertSuccess;
                    break;
                case AlertType.Error:
                    alertClass = Theme.Current.Content.AlertError;
                    break;
                case AlertType.Warning:
                    alertClass = Theme.Current.Content.AlertWarning;
                    break;
                case AlertType.Info:
                    alertClass = Theme.Current.Content.AlertInfo;
                    break;
            }
            _cssClass = $"{Theme.Current.Content.AlertGlobal} {alertClass} {Class ?? string.Empty}";
        }
    }
}

