@typeparam TItem
@inherits TazorBaseComponent
<div class=@Theme.DataGrid.Wrapper>
    @if (!HideToolbar)
    {
        <div class=@Theme.DataGrid.Toolbar>
            <div>
                @Toolbar
            </div>
            <div>
                <div class="relative">
                    <ClickContainer OnClickedOutside=@(() => { _isColumnPopupOpen = false; StateHasChanged(); })>
                        <a class="cursor-pointer" title="Columns" @onclick=@(() => { _isColumnPopupOpen =
                       !_isColumnPopupOpen; })>
                            @HeroIcons.TableCells(Theme.Content.Icon)
                        </a>
                        <div class=@($"top-100 right-0 mt-5 absolute dark:bg-blue-800 shadow p-2 {CetColumnPopupClass()}")>
                            @foreach (var col in Columns)
                            {
                                if (!col.IsRemovable) { continue; }
                                <div class="px-5 py-2 flex items-center">
                                    <span class="mr-3">
                                        <Switch IsChecked=@col.IsVisible IsCheckedChanged=@((bool newValue) => {
                                        Console.WriteLine($"{col.Title} => {newValue}"); col.IsVisible = newValue;
                                        StateHasChanged(); }) />
                                    </span>
                                    <span class="text-sm">
                                        @col.Title
                                    </span>
                                </div>
                            }
                        </div>
                    </ClickContainer>
                </div>

            </div>
        </div>
    }
    <table class=@Theme.DataGrid.TableElement>
        <thead class=@Theme.DataGrid.Header>
            <tr>
                @foreach (var col in Columns)
                {
                    if (col.IsVisible)
                    {
                        <th class=@Theme.DataGrid.HeaderCell @onclick=@(() => { HandleSortChange(col); })>
                            <div class="flex justify-between items-center">
                                <span class="inline-block">@col.Title</span>

                                @if (col.Sort == SortDirection.Ascending)
                                {
                                    @HeroIcons.BarsArrowUp(Theme.DataGrid.SortingIcon)
                                }
                                else if (col.Sort == SortDirection.Descending)
                                {
                                    @HeroIcons.BarsArrowDown(Theme.DataGrid.SortingIcon)
                                }
                            </div>
                        </th>
                    }
                }

                @if (OnEdit != null || OnDelete != null || (AdditionalActions is not null && AdditionalActions.Any()))
                {
                    <th class=@Theme.DataGrid.HeaderCell>Actions</th>
                }
            </tr>
        </thead>
        <tbody class=@Theme.DataGrid.Body>
            @{
                var rowCount = 1;
                var visibleItems = Items.AsQueryable();

                foreach (var sortCol in Columns.Where(m => m.Sort != SortDirection.None))
                {
                    visibleItems = sortCol.Sort == SortDirection.Ascending ? visibleItems.OrderBy(sortCol.Field) :
                    visibleItems.OrderByDescending(sortCol.Field);
                }

                visibleItems = visibleItems.Skip((CurrentPage - 1) * NumberPerPage).Take(NumberPerPage);


            }
            @foreach (var item in visibleItems)
            {
                <tr class=@(rowCount % 2 == 0 ? Theme.DataGrid.EvenRow : Theme.DataGrid.OddRow)>
                    @foreach (var col in Columns)
                    {
                        if (col.IsVisible)
                        {

                            <td class=@Theme.DataGrid.Cell>
                                @if (col.Component != null)
                                {
                                    var componentPropValues = new Dictionary<string, object>();
                                    var componentProps = col.Component.GetProperties();

                                    if(componentProps.Any(m => m.Name.Equals("Item", StringComparison.OrdinalIgnoreCase)))
                                    {
                                        componentPropValues.Add("Item", item);
                                    }
                                    if(componentProps.Any(m => m.Name.Equals("Tag", StringComparison.OrdinalIgnoreCase)))
                                    {
                                        componentPropValues.Add("Tag", col.Tag ?? (object)"");
                                    }

                                    <DynamicComponent Type=@col.Component Parameters=@componentPropValues />
                                }
                                else if (col.Markup != null)
                                {
                                    @(col.Markup(item))
                                }
                                else if (col.Field != null)
                                {
                                    var columnFieldValue = col.Field.Compile()(item) ?? (object)string.Empty;
                                    @if (col.Format != null)
                                    {
                                        @(string.Format("{0:" + col.Format + "}", columnFieldValue))
                                    }
                                    else
                                    {
                                        @(columnFieldValue.ToString())
                                    }
                                }
                            </td>
                        }
                    }

                    @if (OnEdit != null || OnDelete != null || (AdditionalActions is not null && AdditionalActions.Any()))
                    {
                        <td class=@Theme.DataGrid.Cell>
                            <div class="flex items-center gap-2">
                                @if (OnEdit != null)
                                {
                                    if (RequestShowEdit == null || RequestShowEdit(item))
                                    {
                                        <a onclick=@(() => OnEdit(item))>
                                            @(Tazor.Components.Content.HeroIcons.PencilSquare())
                                        </a>
                                    }
                                }

                                @if (OnDelete != null)
                                {
                                    if (RequestShowDelete == null || RequestShowDelete(item))
                                    {
                                        <a onclick=@(() => OnDelete(item))>
                                            @(Tazor.Components.Content.HeroIcons.Trash())
                                        </a>
                                    }
                                }

                                @foreach(var ci in AdditionalActions)
                                {
                                    <a onclick=@(() => { if(ActionRequested != null) { ActionRequested(item, ci); } }) title=@ci.Title>
                                        @(ci.Icon)
                                    </a>
                                }
                            </div>
                        </td>
                    }
                </tr>
                rowCount++;
            }
        </tbody>
        @if (SummaryRow != SummaryRowMode.Hidden)
        {
            <tfoot class=@Theme.DataGrid.SummaryRow>
                <tr>
                    @foreach (var col in Columns)
                    {
                        if (!col.IsVisible) { continue; }

                        <td class=@Theme.DataGrid.SummaryCell>
                            @if (col.Summary != null)
                            {
                                @col.Summary(SummaryRow == SummaryRowMode.AllItems ? Items : visibleItems)
                                ;
                            }
                        </td>
                    }
                </tr>
            </tfoot>
        }
    </table>
    <div class=@Theme.DataGrid.Footer>
        <Pager NumberOfVisiblePages=5 @bind-CurrentPage=@CurrentPage Pages=@((int)Math.Ceiling((double)Items.Count() /
               NumberPerPage)) />
    </div>
</div>